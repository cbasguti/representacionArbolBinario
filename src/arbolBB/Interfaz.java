package arbolBB;

import java.awt.*;
import java.util.Random;
import javax.swing.*;

/**
 *
 * @author Sebastián Gutiérrez
 */
public class Interfaz extends javax.swing.JFrame {

    private ArbolBB arbolito;
    private SimuladorArbolBinario simulador = new SimuladorArbolBinario();

    /**
     * Creates new form Vista
     */
    public Interfaz() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        reinicio.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        botonInsertar = new javax.swing.JButton();
        opciones = new javax.swing.JComboBox<>();
        reinicio = new javax.swing.JButton();
        descripcion = new javax.swing.JLabel();
        labelAltura = new javax.swing.JLabel();
        labelGrado = new javax.swing.JLabel();
        labelHojas = new javax.swing.JLabel();
        describeDatos = new javax.swing.JLabel();
        escogeNodo = new javax.swing.JTextField();
        analizaNodo = new javax.swing.JButton();
        hijosNodo = new javax.swing.JLabel();
        ladoNodo = new javax.swing.JLabel();
        padreNodo = new javax.swing.JLabel();
        abueloNodo = new javax.swing.JLabel();
        hermanoNodo = new javax.swing.JLabel();
        tioNodo = new javax.swing.JLabel();
        ancestrosNodo = new javax.swing.JLabel();
        describeRecorrido = new javax.swing.JLabel();
        tipoRecorrido = new javax.swing.JComboBox<>();
        nodoInicio = new javax.swing.JTextField();
        recorre = new javax.swing.JButton();
        labelRecorrido = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("REPRESENTACIÓN DE ÁRBOLES BINARIOS");
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Panel de Pruebas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N
        jPanel2.setOpaque(false);

        jDesktopPane1.setBackground(new java.awt.Color(153, 204, 255));
        jDesktopPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jDesktopPane1.setOpaque(false);

        jInternalFrame2.setBackground(new java.awt.Color(153, 204, 255));
        jInternalFrame2.setIconifiable(true);
        jInternalFrame2.setMaximizable(true);
        jInternalFrame2.setResizable(true);
        jInternalFrame2.setEnabled(false);
        jInternalFrame2.setFocusCycleRoot(false);
        jInternalFrame2.setVisible(true);

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 584, Short.MAX_VALUE)
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 304, Short.MAX_VALUE)
        );

        jDesktopPane1.add(jInternalFrame2);
        jInternalFrame2.setBounds(10, 10, 600, 340);

        botonInsertar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        botonInsertar.setText("Insertar");
        botonInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInsertarActionPerformed(evt);
            }
        });

        opciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nodos completos", "Recorridos IN - PRE", "Recorridos IN - POS", "Aleatorio" }));

        reinicio.setText("Reiniciar");
        reinicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reinicioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reinicio, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botonInsertar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(opciones, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(opciones, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botonInsertar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(reinicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4)))
                .addContainerGap())
        );

        descripcion.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        descripcion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        descripcion.setText("DATOS DE SU BINÁRBOL");

        labelAltura.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelAltura.setText("Altura:");

        labelGrado.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelGrado.setText("Grado:");

        labelHojas.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelHojas.setText("Hojas:");

        describeDatos.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        describeDatos.setText("A continuación, ingrese el nodo que desee analizar:");

        analizaNodo.setText("Analizar");
        analizaNodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analizaNodoActionPerformed(evt);
            }
        });

        hijosNodo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        hijosNodo.setText("Hijos:");

        ladoNodo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ladoNodo.setText("Lado:");

        padreNodo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        padreNodo.setText("Padre: ");

        abueloNodo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        abueloNodo.setText("Abuelo:");

        hermanoNodo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        hermanoNodo.setText("Hermano:");

        tioNodo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tioNodo.setText("Tío:");
        tioNodo.setToolTipText("");

        ancestrosNodo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ancestrosNodo.setText("Ancestros:");

        describeRecorrido.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        describeRecorrido.setText("Ingrese el tipo de recorrido que desea realizar y el nodo desde el cual desea comenzar:");
        describeRecorrido.setText("<html>Ingrese el tipo de recorrido que desea realizar y el <br>nodo desde el cual desea comenzar:</html>");

        tipoRecorrido.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tipoRecorrido.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Inorden", "Preorden", "Posorden" }));

        nodoInicio.setToolTipText("");

        recorre.setText("Recorre");
        recorre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recorreActionPerformed(evt);
            }
        });

        labelRecorrido.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelRecorrido.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRecorrido.setText("RECORRIDO");
        labelRecorrido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descripcion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelAltura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelGrado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelHojas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelRecorrido, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(escogeNodo, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(analizaNodo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tioNodo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(abueloNodo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ancestrosNodo, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(hermanoNodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(hijosNodo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(padreNodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ladoNodo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tipoRecorrido, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nodoInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(recorre, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(describeDatos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(describeRecorrido, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelAltura)
                .addGap(12, 12, 12)
                .addComponent(labelGrado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelHojas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(describeDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(escogeNodo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analizaNodo, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hijosNodo)
                    .addComponent(ladoNodo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hermanoNodo)
                    .addComponent(padreNodo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tioNodo)
                    .addComponent(abueloNodo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ancestrosNodo)
                .addGap(24, 24, 24)
                .addComponent(describeRecorrido, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipoRecorrido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recorre)
                    .addComponent(nodoInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelRecorrido, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInsertarActionPerformed
        int opcion = opciones.getSelectedIndex();
        ArbolBB nuevoArbol = new ArbolBB();
        String res1, res2;
        switch (opcion) {
            case 0:
                res1 = JOptionPane.showInputDialog(null, "Escriba los nodos separados por comas:", "Nodos completos", HEIGHT);
                String nodos = res1;
                if ("".equals(nodos)) {
                    JOptionPane.showMessageDialog(null, "No se ingresó ningún nodo.");
                } else {
                    String cadaNodo[] = nodos.split(",");
                    for (String ind : cadaNodo) {
                        try {
                            int numerico = Integer.parseInt(ind);
                            nuevoArbol.agregaRegistro(numerico);
                            simulador.insertar(numerico);
                            complementos();
                        } catch (NumberFormatException ex) {
                            JOptionPane.showConfirmDialog(null, "Ocurrió un error inesperado." + ex);
                        }
                    }
                }
                arbolito = nuevoArbol;
                break;
            case 1:
                res1 = JOptionPane.showInputDialog(null, "Escriba el recorrido InOrden, separado por comas:", "Recorridos IN - PRE", HEIGHT);
                res2 = JOptionPane.showInputDialog(null, "Escriba el recorrido PreOrden, separado por comas:", "Recorridos IN - PRE", HEIGHT);
                if ("".equals(res1) || "".equals(res2)) {
                    JOptionPane.showMessageDialog(null, "No se ingresó ningún nodo.");
                } else {
                    String recIno[] = res1.split(",");
                    String recPre[] = res2.split(",");
                    int[][] matrizAux = new int[recIno.length][recIno.length];
                    try {
                        for (int i = 0; i < matrizAux.length; i++) {
                            int aux1 = Integer.parseInt(recPre[i]);
                            for (int j = 0; j < matrizAux.length; j++) {
                                int aux2 = Integer.parseInt(recIno[j]);
                                if (aux1 == aux2) {
                                    matrizAux[i][j] = 1;
                                }
                            }
                        }
                        for (int i = 0; i < matrizAux.length; i++) {
                            for (int j = 0; j < matrizAux.length; j++) {
                                if (matrizAux[i][j] == 1) {
                                    int nodo = Integer.parseInt(recPre[i]);
                                    nuevoArbol.agregaRegistro(nodo);
                                    simulador.insertar(nodo);
                                    complementos();
                                }
                            }
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showConfirmDialog(null, "Ocurrió un error inesperado." + ex);
                    }
                }
                arbolito = nuevoArbol;
                break;
            case 2:
                res1 = JOptionPane.showInputDialog(null, "Escriba el recorrido InOrden, separado por comas:", "Recorridos IN - POS", HEIGHT);
                res2 = JOptionPane.showInputDialog(null, "Escriba el recorrido PosOrden, separado por comas:", "Recorridos IN - POS", HEIGHT);
                if ("".equals(res1) || "".equals(res2)) {
                    JOptionPane.showMessageDialog(null, "No se ingresó ningún nodo.");
                } else {
                    String recIno[] = res1.split(",");
                    String recPos[] = res2.split(",");
                    int[][] matrizAux = new int[recIno.length][recIno.length];
                    try {
                        for (int i = 0; i < matrizAux.length; i++) {
                            int aux1 = Integer.parseInt(recPos[i]);
                            for (int j = 0; j < matrizAux.length; j++) {
                                int aux2 = Integer.parseInt(recIno[j]);
                                if (aux1 == aux2) {
                                    matrizAux[i][j] = 1;
                                }
                            }
                        }
                        for (int i = (matrizAux.length - 1); i >= 0; i--) {
                            for (int j = (matrizAux.length - 1); j >= 0; j--) {
                                if (matrizAux[i][j] == 1) {
                                    int nodo = Integer.parseInt(recPos[i]);
                                    nuevoArbol.agregaRegistro(nodo);
                                    simulador.insertar(nodo);
                                    complementos();
                                }
                            }
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showConfirmDialog(null, "Ocurrió un error inesperado." + ex);
                    }
                }
                arbolito = nuevoArbol;
                break;
            case 3:
                Random rand = new Random();
                int random = rand.nextInt(20);
                for (int i = 0; i < random; i++) {
                    random = rand.nextInt(100);
                    nuevoArbol.agregaRegistro(random);
                    simulador.insertar(random);
                    complementos();
                }
                arbolito = nuevoArbol;
                break;
        }
        nodoInicio.setText(String.valueOf(arbolito.getRaiz().retornaDato()));
        labelAltura.setText("Altura: " + String.valueOf(arbolito.alturaArbol(arbolito.getRaiz())));
        labelGrado.setText("Grado: " + String.valueOf(arbolito.gradoArbol(arbolito.getRaiz())));
        labelHojas.setText("Hojas: " + "(" + String.valueOf(arbolito.hojasArbol(arbolito.getRaiz())) + ") ");
        for (String hoja : arbolito.retornaHojas()) {
            labelHojas.setText(labelHojas.getText() + hoja + " ");
        }
        reinicio.setVisible(true);
    }//GEN-LAST:event_botonInsertarActionPerformed

    private void analizaNodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analizaNodoActionPerformed
        NodoBinario nodoEscogido, padre, abuelo;
        nodoEscogido = arbolito.buscaNodo(escogeNodo.getText());
        if (nodoEscogido != arbolito.getRaiz()) {
            padre = nodoEscogido.retornaPadre();
            abuelo = padre.retornaPadre();
        } else {
            padre = null;
            abuelo = null;
        }
        // Busca los hijos del Nodo
        if ((nodoEscogido.retornaLigaIzq() != null) && (nodoEscogido.retornaLigaDer() != null)) {
            hijosNodo.setText("Hijos:(2) " + nodoEscogido.retornaLigaIzq().retornaDato() + "," + nodoEscogido.retornaLigaDer().retornaDato());
        } else if ((nodoEscogido.retornaLigaIzq() == null) && (nodoEscogido.retornaLigaDer() != null)) {
            hijosNodo.setText("Hijos:(1) " + nodoEscogido.retornaLigaDer().retornaDato());
        } else if ((nodoEscogido.retornaLigaDer() == null) && (nodoEscogido.retornaLigaIzq() != null)) {
            hijosNodo.setText("Hijos:(1) " + nodoEscogido.retornaLigaIzq().retornaDato());
        } else {
            hijosNodo.setText("Hijos:(0) no tiene");
        }

        // Busca abuelo del Nodo
        if ((nodoEscogido == arbolito.getRaiz()) || (padre == arbolito.getRaiz())) {
            abueloNodo.setText("Abuelo: no tiene");
        } else {
            abueloNodo.setText("Abuelo: " + abuelo.retornaDato());
        }

        // Busca padre del Nodo
        if (nodoEscogido == arbolito.getRaiz()) {
            padreNodo.setText("Padre: no tiene");
        } else {
            padreNodo.setText("Padre: " + padre.retornaDato());
        }

        // Busca hermano del Nodo
        if (nodoEscogido == arbolito.getRaiz()) {
            hermanoNodo.setText("Hermano: no tiene");
        } else {
            if (padre.retornaLigaDer() != null) {
                if (padre.retornaLigaDer() == nodoEscogido) {
                    ladoNodo.setText("Lado: derecho");
                    if (padre.retornaLigaIzq() != null) {
                        hermanoNodo.setText("Hermano: " + padre.retornaLigaIzq().retornaDato());
                    } else {
                        hermanoNodo.setText("Hermano: no tiene");
                    }
                }
            }
            if (padre.retornaLigaIzq() != null) {
                if (padre.retornaLigaIzq() == nodoEscogido) {
                    ladoNodo.setText("Lado: izquierdo");
                    if (padre.retornaLigaDer() != null) {
                        hermanoNodo.setText("Hermano: " + padre.retornaLigaDer().retornaDato());
                    } else {
                        hermanoNodo.setText("Hermano: no tiene");
                    }
                }
            }
        }

        // Busca tio del Nodo
        if ((nodoEscogido == arbolito.getRaiz()) || (padre == arbolito.getRaiz())) {
            tioNodo.setText("Tio: no tiene");
        } else {
            if (abuelo.retornaLigaDer() != null) {
                if (abuelo.retornaLigaDer() == padre) {
                    if (abuelo.retornaLigaIzq() != null) {
                        tioNodo.setText("Tio: " + abuelo.retornaLigaIzq().retornaDato());
                    } else {
                        tioNodo.setText("Tio: no tiene");
                    }
                }
            }
            if (abuelo.retornaLigaIzq() != null) {
                if (abuelo.retornaLigaIzq() == padre) {
                    if (abuelo.retornaLigaDer() != null) {
                        tioNodo.setText("Tio: " + abuelo.retornaLigaDer().retornaDato());
                    } else {
                        tioNodo.setText("Tio: no tiene");
                    }
                }
            }
        }

        // Busca ancestros del nodo
        if (arbolito.ancestrosNodo(nodoEscogido).isEmpty()) {
            ancestrosNodo.setText("Ancestros: no tiene");
        } else {
            ancestrosNodo.setText("Ancestros:");
            for (String ancestro : arbolito.ancestrosNodo(nodoEscogido)) {
                ancestrosNodo.setText(ancestrosNodo.getText() + " " + ancestro);
            }
        }
    }//GEN-LAST:event_analizaNodoActionPerformed

    private void recorreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recorreActionPerformed
        labelRecorrido.setText("");
        int tipo = tipoRecorrido.getSelectedIndex();
        switch (tipo) {
            case 0:
                arbolito.borraRecorrido();
                arbolito.recorreInorden(arbolito.buscaNodo(nodoInicio.getText()));
                for (String nodo : arbolito.retornaRecorrido()) {
                    labelRecorrido.setText(labelRecorrido.getText() + nodo + " ");
                }
                break;
            case 1:
                arbolito.borraRecorrido();
                arbolito.recorrePreorden(arbolito.buscaNodo(nodoInicio.getText()));
                for (String nodo : arbolito.retornaRecorrido()) {
                    labelRecorrido.setText(labelRecorrido.getText() + nodo + " ");
                }
                break;
            case 2:
                arbolito.borraRecorrido();
                arbolito.recorrePosorden(arbolito.buscaNodo(nodoInicio.getText()));
                for (String nodo : arbolito.retornaRecorrido()) {
                    labelRecorrido.setText(labelRecorrido.getText() + nodo + " ");
                }
                break;
        }
    }//GEN-LAST:event_recorreActionPerformed

    private void reinicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reinicioActionPerformed
        arbolito = new ArbolBB();
        simulador = new SimuladorArbolBinario();
        complementos();
        borraInfo();
    }//GEN-LAST:event_reinicioActionPerformed

    public void complementos() {
        this.repintarArbol();
    }

    private void borraInfo() {
        labelAltura.setText("Altura:");
        labelGrado.setText("Grado:");
        labelHojas.setText("Hojas:");
        hijosNodo.setText("Hijos:");
        abueloNodo.setText("Abuelo:");
        padreNodo.setText("Padre:");
        hermanoNodo.setText("Hermano:");
        ladoNodo.setText("Lado:");
        tioNodo.setText("Tio:");
        labelRecorrido.setText("RECORRIDO");
        escogeNodo.setText("");
        nodoInicio.setText("");
        ancestrosNodo.setText("Ancestros:");
    }

    private void repintarArbol() {
        this.jDesktopPane1.removeAll();
        Rectangle tamaño = this.jInternalFrame2.getBounds();
        this.jInternalFrame2 = null;
        this.jInternalFrame2 = new JInternalFrame("Representación gráfica del árbol", true);
        this.jDesktopPane1.add(this.jInternalFrame2, JLayeredPane.DEFAULT_LAYER);
        this.jInternalFrame2.setVisible(true);
        this.jInternalFrame2.setBounds(tamaño);
        this.jInternalFrame2.setEnabled(false);
        this.jInternalFrame2.add(this.simulador.getDibujo(), BorderLayout.CENTER);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel abueloNodo;
    private javax.swing.JButton analizaNodo;
    private javax.swing.JLabel ancestrosNodo;
    private javax.swing.JButton botonInsertar;
    private javax.swing.JLabel describeDatos;
    private javax.swing.JLabel describeRecorrido;
    private javax.swing.JLabel descripcion;
    private javax.swing.JTextField escogeNodo;
    private javax.swing.JLabel hermanoNodo;
    private javax.swing.JLabel hijosNodo;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel labelAltura;
    private javax.swing.JLabel labelGrado;
    private javax.swing.JLabel labelHojas;
    private javax.swing.JLabel labelRecorrido;
    private javax.swing.JLabel ladoNodo;
    private javax.swing.JTextField nodoInicio;
    private javax.swing.JComboBox<String> opciones;
    private javax.swing.JLabel padreNodo;
    private javax.swing.JButton recorre;
    private javax.swing.JButton reinicio;
    private javax.swing.JLabel tioNodo;
    private javax.swing.JComboBox<String> tipoRecorrido;
    // End of variables declaration//GEN-END:variables
}
